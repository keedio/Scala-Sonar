<statements>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>8</id><start>-1</start><end>-1</end><line>14</line><description>&quot;tres&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>11</id><start>-1</start><end>-1</end><line>14</line><description>SimpleApp.this.foo(scala.Array.apply[String](&quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;, &quot;cuatro&quot;)(ClassTag.apply[String](classOf[java.lang.String])))</description><symbolName>org.keedio.sonar.scala.SimpleApp.foo</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>foo</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>2</id><start>-1</start><end>-1</end><line>10</line><description>a.+(b)</description><symbolName>java.lang.String.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>5</id><start>-1</start><end>-1</end><line>14</line><description>&quot;concat words = &quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>4</id><start>-1</start><end>-1</end><line>13</line><description>scala.this.Predef.println(&quot;Hello World!&quot;)</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>13</id><start>-1</start><end>-1</end><line>14</line><description>scala.this.Predef.println(&quot;concat words = &quot;.+(SimpleApp.this.foo(scala.Array.apply[String](&quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;, &quot;cuatro&quot;)(ClassTag.apply[String](classOf[java.lang.String])))))</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>7</id><start>-1</start><end>-1</end><line>14</line><description>&quot;dos&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>foo</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>1</id><start>-1</start><end>-1</end><line>10</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>10</id><start>-1</start><end>-1</end><line>14</line><description>scala.Array.apply[String](&quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;, &quot;cuatro&quot;)(ClassTag.apply[String](classOf[java.lang.String]))</description><symbolName>scala.Array.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>9</id><start>-1</start><end>-1</end><line>14</line><description>&quot;cuatro&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>foo</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>3</id><start>-1</start><end>-1</end><line>10</line><description>scala.this.Predef.refArrayOps[String](x).foldLeft[String](&quot;&quot;)(((a: String, b: String) =&gt; a.+(b)))</description><symbolName>scala.collection.IndexedSeqOptimized.foldLeft</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>12</id><start>-1</start><end>-1</end><line>14</line><description>&quot;concat words = &quot;.+(SimpleApp.this.foo(scala.Array.apply[String](&quot;uno&quot;, &quot;dos&quot;, &quot;tres&quot;, &quot;cuatro&quot;)(ClassTag.apply[String](classOf[java.lang.String]))))</description><symbolName>java.lang.String.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</source><package>org.keedio.sonar.scala</package><class>SimpleApp</class><classType>Object</classType><topLevelClass>SimpleApp</topLevelClass><method>main</method><path>/Users/luislazaro/IdeaProjects/Scala-Sonar/src/main/scala/org/keedio/sonar/scala/SimpleApp.scala</path><id>6</id><start>-1</start><end>-1</end><line>14</line><description>&quot;uno&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>